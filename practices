
//trigger one record
trigger MyTriggerNotBulk on Account(before insert) {
    Account a = Trigger.new[0];
    a.Description = 'New description';
}



// This trigger executes before records of the "Account" object are inserted into the Salesforce database.

//declare Apex trigger named "MyTriggerBulk" that operates on the "Account" object
trigger MyTriggerBulk on Account (before insert){   
//bulkified version
  for(Account acc: Trigger.new){    //This sObject list is only available in insert, update, and undelete triggers.  Trigger.new is a collection of records
// set the description field with test description value
     acc.Description ='test description';
  }
}


/*trigger context variables: Trigger.new; Trigger.isInsert; Trigger.isUpdate; Trigger.isDelete;Trigger.isBefore;Trigger.isAfter;Trigger.Old; Trigger.oldMap;
trigger context variables are special variables that provide information about the context in which a trigger is executed */

//combines an Apex trigger with a separate Apex class to handle specific logic when new Account records are inserted into Salesforce. It sets the 'Hot' rating for Accounts with the 'Media' industry during the "before insert" phase.

public class AccountTriggerHandler{
//accepts a list of Account records (newList) as its paramete
  public static void beforeInsert(List<Account> newList) {
  
//It iterates through the list of Account records (newList) and checks if each Account has a non-null Industry field with the value 'Media'  
   for(Account acc: newList){
     if(acc.Industry != null && acc.Industry == 'Media') {
     
     //If an Account meets this condition, it sets the Rating field of that Account to 'Hot'
        acc.Rating ='Hot';
     }
       }
  }
}


trigger AccountTrigger on Account (before insert, after insert) {
    if (Trigger.isInsert) {
        if (Trigger.isBefore) {

/* If the trigger is executing "before insert," it calls the beforeInsert method from the AccountTriggerHandler class and passes in Trigger.New, which is the list of new Account records that are being inserted. 
This will apply the logic defined in beforeInsert to set the 'Hot' rating for Accounts in the 'Media' industry before they are inserted into the database.  */ 
            AccountTriggerHandler.beforeInsert(Trigger.New);
        }
        else if (Trigger.isAfter) {
            // Logic for after insert (you can add your specific logic here)
        }
    }
}


/*Steps: trigger--> create a new list with SOQL--> for loop each account from new created list--> assign the opps from each account to a new opp

trigger SoqlTriggerBulk on Account(after update) {  
    // Perform SOQL query once.    
    // Get the accounts and their related opportunities.
    List<Account> acctsWithOpps = 
        [SELECT Id,(SELECT Id,Name,CloseDate FROM Opportunities) 
         FROM Account WHERE Id IN :Trigger.new];
    // Iterate over the returned accounts    
    for(Account a : acctsWithOpps) {   //look each account

/*Opportunity[] relatedOpps: declares a variable named relatedOpps of type Opportunity[], which is an array of Opportunity objects. It's used to store the related opportunities retrieved for a specific Account.*/
/*access the child records (Opportunities) related to a specific parent record. a is an instance of the Account object within the loop, and Opportunities is the relationship name*/
        Opportunity[] relatedOpps = a.Opportunities;    
        // Do some other processing
    }
}

/*Steps: trigger--> create a new list with SOQL--> for loop each account from new created list--> if else condition--> DML Outside the for loop
//perform DML in bulk efficiently with only one DML call on a list of opportunities
trigger DmlTriggerBulk on Account(after update) {   
    // Get the related opportunities for the accounts in this trigger.        
    List<Opportunity> relatedOpps = [SELECT Id,Name,Probability FROM Opportunity
        WHERE AccountId IN :Trigger.new];
    List<Opportunity> oppsToUpdate = new List<Opportunity>();
    // Iterate over the related opportunities
    for(Opportunity opp : relatedOpps) {      
        // Update the description when probability is greater 
        // than 50% but less than 100% 
        if ((opp.Probability >= 50) && (opp.Probability < 100)) {
            opp.Description = 'New description for opportunity.';
            oppsToUpdate.add(opp);
        }
    }
    // Perform DML on a collection
    update oppsToUpdate;
}



